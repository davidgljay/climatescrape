(function() {
  var QueueItem;

  QueueItem = void 0;

  module.exports = function(connection, crawler) {
    var schema;
    schema = new connection.base.Schema({
      protocol: {
        type: String,
        required: true,
        index: true
      },
      host: {
        type: String,
        required: true,
        index: true
      },
      port: {
        type: Number,
        index: true
      },
      path: {
        type: String,
        required: true,
        index: true
      },
      status: {
        type: String,
        "default": 'queued',
        index: true,
        "enum": ['queued', 'spooled', 'fetched', 'redirected', 'error']
      },
      fetched: {
        type: Boolean,
        "default": false
      },
      stateData: {
        type: Object,
        "default": {}
      },
      crawler: {
        type: String,
        index: true,
        "default": 'default'
      }
    });
    schema.index({
      crawler: 1,
      status: 1
    });
    schema.virtual('url').get(function() {
      return this.protocol + '://' + this.host + (this.port ? ':' + this.port : void 0) + this.path;
    });
    if (QueueItem == null) {
      QueueItem = connection.model("QueueItem", schema);
    }
    return module.exports = QueueItem;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlF1ZXVlSXRlbS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLFNBQUE7O0FBQUEsRUFBQSxTQUFBLEdBQVksTUFBWixDQUFBOztBQUFBLEVBRUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsU0FBQyxVQUFELEVBQWEsT0FBYixHQUFBO0FBQ2YsUUFBQSxNQUFBO0FBQUEsSUFBQSxNQUFBLEdBQWEsSUFBQSxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQWhCLENBQ1g7QUFBQSxNQUFBLFFBQUEsRUFDRTtBQUFBLFFBQUEsSUFBQSxFQUFVLE1BQVY7QUFBQSxRQUNBLFFBQUEsRUFBVSxJQURWO0FBQUEsUUFFQSxLQUFBLEVBQVUsSUFGVjtPQURGO0FBQUEsTUFLQSxJQUFBLEVBQ0U7QUFBQSxRQUFBLElBQUEsRUFBVSxNQUFWO0FBQUEsUUFDQSxRQUFBLEVBQVUsSUFEVjtBQUFBLFFBRUEsS0FBQSxFQUFVLElBRlY7T0FORjtBQUFBLE1BVUEsSUFBQSxFQUNFO0FBQUEsUUFBQSxJQUFBLEVBQVUsTUFBVjtBQUFBLFFBQ0EsS0FBQSxFQUFVLElBRFY7T0FYRjtBQUFBLE1BY0EsSUFBQSxFQUNFO0FBQUEsUUFBQSxJQUFBLEVBQVUsTUFBVjtBQUFBLFFBQ0EsUUFBQSxFQUFVLElBRFY7QUFBQSxRQUVBLEtBQUEsRUFBVSxJQUZWO09BZkY7QUFBQSxNQW1CQSxNQUFBLEVBQ0U7QUFBQSxRQUFBLElBQUEsRUFBVSxNQUFWO0FBQUEsUUFDQSxTQUFBLEVBQVUsUUFEVjtBQUFBLFFBRUEsS0FBQSxFQUFVLElBRlY7QUFBQSxRQUdBLE1BQUEsRUFBVSxDQUNSLFFBRFEsRUFFUixTQUZRLEVBR1IsU0FIUSxFQUlSLFlBSlEsRUFLUixPQUxRLENBSFY7T0FwQkY7QUFBQSxNQStCQSxPQUFBLEVBRUU7QUFBQSxRQUFBLElBQUEsRUFBVSxPQUFWO0FBQUEsUUFDQSxTQUFBLEVBQVUsS0FEVjtPQWpDRjtBQUFBLE1Bb0NBLFNBQUEsRUFFRTtBQUFBLFFBQUEsSUFBQSxFQUFVLE1BQVY7QUFBQSxRQUNBLFNBQUEsRUFBVSxFQURWO09BdENGO0FBQUEsTUF5Q0EsT0FBQSxFQUtFO0FBQUEsUUFBQSxJQUFBLEVBQVUsTUFBVjtBQUFBLFFBQ0EsS0FBQSxFQUFVLElBRFY7QUFBQSxRQUVBLFNBQUEsRUFBVSxTQUZWO09BOUNGO0tBRFcsQ0FBYixDQUFBO0FBQUEsSUFxREEsTUFBTSxDQUFDLEtBQVAsQ0FDRTtBQUFBLE1BQUEsT0FBQSxFQUFTLENBQVQ7QUFBQSxNQUNBLE1BQUEsRUFBUyxDQURUO0tBREYsQ0FyREEsQ0FBQTtBQUFBLElBeURBLE1BQU0sQ0FBQyxPQUFQLENBQWUsS0FBZixDQUNFLENBQUMsR0FESCxDQUNPLFNBQUEsR0FBQTthQUFHLElBQUMsQ0FBQSxRQUFELEdBQVksS0FBWixHQUFvQixJQUFDLENBQUEsSUFBckIsR0FBNEIsQ0FBSSxJQUFDLENBQUEsSUFBSixHQUFjLEdBQUEsR0FBTSxJQUFDLENBQUEsSUFBckIsR0FBQSxNQUFELENBQTVCLEdBQTBELElBQUMsQ0FBQSxLQUE5RDtJQUFBLENBRFAsQ0F6REEsQ0FBQTs7TUE0REEsWUFBYSxVQUFVLENBQUMsS0FBWCxDQUFpQixXQUFqQixFQUE4QixNQUE5QjtLQTVEYjtXQTZEQSxNQUFNLENBQUMsT0FBUCxHQUFpQixVQTlERjtFQUFBLENBRmpCLENBQUE7QUFBQSIsImZpbGUiOiJRdWV1ZUl0ZW0uanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJRdWV1ZUl0ZW0gPSB1bmRlZmluZWRcblxubW9kdWxlLmV4cG9ydHMgPSAoY29ubmVjdGlvbiwgY3Jhd2xlcikgLT5cbiAgc2NoZW1hID0gbmV3IGNvbm5lY3Rpb24uYmFzZS5TY2hlbWFcbiAgICBwcm90b2NvbDpcbiAgICAgIHR5cGUgICAgOiBTdHJpbmdcbiAgICAgIHJlcXVpcmVkOiB5ZXNcbiAgICAgIGluZGV4ICAgOiB5ZXNcblxuICAgIGhvc3QgICAgOlxuICAgICAgdHlwZSAgICA6IFN0cmluZ1xuICAgICAgcmVxdWlyZWQ6IHllc1xuICAgICAgaW5kZXggICA6IHllc1xuXG4gICAgcG9ydCAgICA6XG4gICAgICB0eXBlICAgIDogTnVtYmVyXG4gICAgICBpbmRleCAgIDogeWVzXG5cbiAgICBwYXRoICAgIDpcbiAgICAgIHR5cGUgICAgOiBTdHJpbmdcbiAgICAgIHJlcXVpcmVkOiB5ZXNcbiAgICAgIGluZGV4ICAgOiB5ZXNcblxuICAgIHN0YXR1cyAgOlxuICAgICAgdHlwZSAgICA6IFN0cmluZ1xuICAgICAgZGVmYXVsdCA6ICdxdWV1ZWQnXG4gICAgICBpbmRleCAgIDogeWVzXG4gICAgICBlbnVtICAgIDogW1xuICAgICAgICAncXVldWVkJyAgICAgICMgQWRkZWQgdG8gcXVldWVcbiAgICAgICAgJ3Nwb29sZWQnICAgICAjIFJlcXVlc3RlZCwgYnV0IG5vIHJlc3BvbnNlIHlldFxuICAgICAgICAnZmV0Y2hlZCcgICAgICMgTm9ybWFsIHJlc3BvbnNlIChPSykgcmVjZWl2ZWQuIFRoaXMgaXRlbSBpcyBkb25lLlxuICAgICAgICAncmVkaXJlY3RlZCcgICMgMzB4IFJlZGlyZWN0IHJlY2VpdmVkLiBUYXJnZXQgc2hvdWxkIHByb2JhYmlseSBiZSBhZGRlZCB0byBxdWV1ZSwgYnV0IGl0J3MgdXAgdG8gYXBwbGljYXRpb24gbG9naWMgdG8gaGFuZGxlIHRoaXMuXG4gICAgICAgICdlcnJvcicgICAgICAgIyBTb21lIGtpbmQgb2YgZXJyb3IuIERldGFpbHMgc2hvdWxkIGdvIHRvIHN0YXRlRGF0YVxuICAgICAgXVxuXG4gICAgZmV0Y2hlZCA6XG4gICAgICAjIFRPRE86IElzbid0IGl0IHJlZHVuZGFudD8gV2UgaGF2ZSBzdGF0dXMgZmllbGQgZm9yIHRoYXQuXG4gICAgICB0eXBlICAgIDogQm9vbGVhblxuICAgICAgZGVmYXVsdCA6IG5vXG5cbiAgICBzdGF0ZURhdGE6XG4gICAgICAjIE90aGVyIHByb3BlcnRpZXMgb2YgSXRlbSAobGlrZSBzdGF0cywgZXJyb3IgZGVzY3JpcHRpb24pXG4gICAgICB0eXBlICAgIDogT2JqZWN0XG4gICAgICBkZWZhdWx0IDoge31cblxuICAgIGNyYXdsZXIgOlxuICAgICAgIyBJZGVudGlmaWVzIGNyYXdsZXIsIGZvciB3aGljaCB0aGlzIHF1ZXVlIGlzIGhlbGRcbiAgICAgICMgVE9ETzogSXQgd291bGQgYmUgbmljZSB0byB1c2UgZGlzY3JpbWluYXRvcnMgaW5zdGVhZC5cbiAgICAgICMgSXQgdGhyb3dzIERpc2NyaW1pbmF0b3IgXCIje25hbWV9XCIgY2FuIG9ubHkgYmUgYSBkaXNjcmltaW5hdG9yIG9mIHRoZSByb290IG1vZGVsXG4gICAgICAjIFdURj9cbiAgICAgIHR5cGUgICAgOiBTdHJpbmdcbiAgICAgIGluZGV4ICAgOiB5ZXNcbiAgICAgIGRlZmF1bHQgOiAnZGVmYXVsdCdcblxuICAjIENvbXBvdW5kIGluZGV4IGZvciBmaW5kQW5kTW9kaWZ5IHF1ZXJ5IHJ1biBpbiBNb25nb1F1ZXVlI29sZGVzdFVuZmV0Y2hlZEl0ZW1cbiAgIyBXaXRob3V0IGl0IG1vbmdvZCBwcm9kdWNlcyBnaWdhYnl0ZXMgb2YgbG9ncyB3aXRoIHdhcm5pbmdzXG4gIHNjaGVtYS5pbmRleFxuICAgIGNyYXdsZXI6IDFcbiAgICBzdGF0dXMgOiAxXG5cbiAgc2NoZW1hLnZpcnR1YWwgJ3VybCdcbiAgICAuZ2V0IC0+IEBwcm90b2NvbCArICc6Ly8nICsgQGhvc3QgKyAoaWYgQHBvcnQgdGhlbiAnOicgKyBAcG9ydCkgKyBAcGF0aFxuXG4gIFF1ZXVlSXRlbSA/PSBjb25uZWN0aW9uLm1vZGVsIFwiUXVldWVJdGVtXCIsIHNjaGVtYVxuICBtb2R1bGUuZXhwb3J0cyA9IFF1ZXVlSXRlbVxuIl19